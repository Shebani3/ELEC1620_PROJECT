#include "mbed.h"
#define WAIT_TIME_MS 1000 
#define NOTE_C4  262 
#define NOTE_A4  440
#define NOTE_B4  494
#define NOTE_C5  523
      
DigitalOut led1(PC_0);
DigitalOut seg1(PA_12);
DigitalOut seg2(PA_11);
DigitalOut seg3(PB_12);
DigitalOut seg4(PB_11);
DigitalOut seg5(PB_2);
DigitalOut seg6(PB_1);
DigitalOut seg7(PB_15);
DigitalOut seg8(PB_14);

PwmOut blue_LED(PB_5);
PwmOut green_LED(PB_3);   
PwmOut red_LED(PB_4); 
PwmOut buzzer(PA_15); 

BufferedSerial pc(USBTX, USBRX);  //establish serial communications between PC and NUCLEO

AnalogIn FSR(PA_1); //Force sensor pin
AnalogIn pot1(PA_5);
AnalogIn pot2(PA_7);

DigitalIn button1(PC_10);
DigitalIn button2(PC_11);

BusOut leds_bus(PC_1, PB_0, PA_4); 
//    A       B     C      D    E     F      G        
BusOut SegDis(PA_11, PA_12, PB_1, PB_15, PB_14, PB_12, PB_11); //Add remaining pins in correct order
//DigitalOut decimal_point(PB_2); //Add pin for the Decimal Point 
//float frequency = 1;


void init_leds(); //initialisation code for all leds here.
void init_buttons(); //initialisation code for all buttons here.
void SegDis_init(); //turn off the display by setting all segments to '0'.
void init_multiled();//initialisation code for multi-coloured LED here.

void intermediate_light();  //Multi-colour LED flashes yellow after completion of a function.
void play_note(int frequency); //Buzzer plays a note once every 600ms
void check_mode_temp(); // Based on input from pot1 and pot 2, sets cntl_val1 for mode and temp_va1 for temperature.
void FSR_check(); // Checks the load size and sets the FSR_val1 based on the input to FSR
void cycle_time();//Based on cntl_val1, temp_val1 and FSR_val1 sets the cycle time by calling 'SegDis_loading' function and ending cycle.
void SegDis_loading(int m); //7-seg display shows a 'loading' animation effect for cycle time and timer can also be paused.

//               0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F    
int hexDis[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71 };
//int dp_status = 0;
int hexDis2[] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20 }; // For 'loading' animation effect

int cntl_val = 0; //pot1 read variable
int cntl_val1 = 0; //stores the mode setting number
int cntl_val2 = 0; 


int temp_val = 0; //pot2 read variable
int temp_val1 = 0;// stores the temperature setting number

float FSR_Val= 0.0; //FSR read variable
int FSR_val1= 0; 

int pause_val=0;

int main() {

 init_leds();
 init_buttons();

   while(1){

   if(button1.read()){ //if the on/off button is pressed the washing machine is turned on and the following is executed.

            led1.write(1);
            printf("Washing Machine on\n");
            SegDis_init();
            check_mode_temp();
            intermediate_light();
            FSR_check();
            intermediate_light();
            cycle_time();
            cntl_val2 = 0;
            ThisThread::sleep_for(2000ms);
            printf("Washing Machine off\n");
            }

     else{
     led1.write(0);
         }  
    }
}


void SegDis_init(){
    //turn off the display by setting all segments to '0'
    SegDis.write(0x00);   
}

void init_leds(){
 // initialisation code for all leds here
    led1.write(0);
    leds_bus.write(0); 
}
void init_buttons(){
    button1.mode(PullNone); 
    button2.mode(PullNone); //turn off internal pull up / pull down resistors
}

void init_multiled(){
    // initialisation code for multicoloured led here
    blue_LED.write(0);
    green_LED.write(0);
    red_LED.write(0);
}

 void intermediate_light(){ 
     for(int i = 0; i <5; i ++){  
               // LED turns on yellow for 100ms 
                green_LED.write(1.0);
                red_LED.write(1.0);                         
                ThisThread::sleep_for(100ms);
               // LED turns off yellow for 100ms 
                green_LED.write(0.0);  
                red_LED.write(0.0); 
                ThisThread::sleep_for(100ms);
  
 }}
 void play_note(int frequency){
    buzzer.period_us((float) 1000000.0f/ (float) frequency);    //set the period of the pwm signal (in us)
    buzzer.pulsewidth_us(1*buzzer.read_period_us()/2);           
    ThisThread::sleep_for(500ms);     
    buzzer.pulsewidth_us(0); 
    ThisThread::sleep_for(100ms); }

void SegDis_loading(int m){ //This fuction displays the status of the washing machine and runs the timer.
     for (int s=0; s<m;s++ ){ // m = total cycle time(seconds) - 5(seconds) , in reality cycle duration is in minutes. 
         if (s==0){
             printf("Cycle started >> 0%% complete\n"); // serial monitor will display this message at the start of the cycle
         }
         
         else if (s==m/2){
              printf("Cycle started >> 50%% complete\n"); // when approximately half the time (m/2) is reached, this message is printed.
              
         }
         else if (s==m*(3)/4){
              printf("Cycle started >> 75%% complete\n"); // when approximately 75% of the time (3m/4) is complete, this message is printed.
              
         }
     for(int i = 0; i < 6; i++){   // This is to create a 'loading' animation effect on the seven segment display
         if (button1.read()){while(1){ // This part inside the for loop allows the user to pause and resume the cycle when button1 is pressed.
             printf("paused\n");
             ThisThread::sleep_for(100ms);
             pause_val=1;
             if (pause_val==1 && button1.read()){ 
             pause_val = 0;
             break;}
         }}                           
            SegDis.write(hexDis2[i]); //cycle through the array and display each number / letter
            ThisThread::sleep_for(167ms);
        }}
        SegDis.write(hexDis[5]); // Last 5 seconds of cycle are displayed on the seven-segment display.
        ThisThread::sleep_for(1s);
        SegDis.write(hexDis[4]);
        ThisThread::sleep_for(1s);
        SegDis.write(hexDis[3]);
        ThisThread::sleep_for(1s);
        SegDis.write(hexDis[2]);
        ThisThread::sleep_for(1s);
        SegDis.write(hexDis[1]);
        ThisThread::sleep_for(1s);   
 }

void check_mode_temp() { 
    while(1){

       cntl_val = pot1.read_u16()/21845; // pot1 used to set one of 3 modes (cotton, permanent press and delicate). 
       temp_val = pot2.read_u16()/21845; // pot2 used to set one of 3 temperatures (cold, warm, hot).
            
       if(cntl_val==0){
        leds_bus.write(1);                             // When cntrl_val is 0, the mode is cotton.
        SegDis.write(hexDis[1]);
        if(button2.read() == true && temp_val == 0 ) { // if button 2 is pressed and temp_val from pot2 is 0 (cold), 
            leds_bus.write(0);                         // set cntl_val1 = 1 and temp_val1 = 1
            init_multiled();
            SegDis_init();
            cntl_val1 = 1;
            temp_val1 = 1;
            break;}
            if(button2.read() == true && temp_val == 1 ) { // if button 2 is pressed and temp_val from pot2 is 1 (warm),
            leds_bus.write(0);                             // set cntl_val1 = 1 and temp_val1 = 2
            init_multiled();
            SegDis_init();
            cntl_val1 = 1;
            temp_val1 = 2;
            break;}
            if(button2.read() == true && temp_val == 2 ) { // if button 2 is pressed and temp_val from pot2 is 2 (hot),
            leds_bus.write(0);                             //set cntl_val1 = 1 and temp_val1 = 3
            init_multiled();
            SegDis_init();
            cntl_val1 = 1;
            temp_val1 = 3;
            break;}
        
        }
        else if(cntl_val == 1 ){
        leds_bus.write(3);                             // When cntrl_val is 1, the mode is permanent press.
        SegDis.write(hexDis[2]);
        if(button2.read() == true && temp_val == 0 ) {// if button 2 is pressed and temp_val from pot2 is 0 (cold), 
            leds_bus.write(0);                        // set cntl_val1 = 2 and temp_val1 = 1
            init_multiled();
            SegDis_init();
            cntl_val1 = 2;
            temp_val1 = 1;
            break;}
            if(button2.read() == true && temp_val == 1 ) { // if button 2 is pressed and temp_val from pot2 is 1 (warm),
            leds_bus.write(0);                             // set cntl_val1 = 2 and temp_val1 = 2
            init_multiled();
            SegDis_init();
            cntl_val1 = 2;
            temp_val1 = 2;
            break;}
            if(button2.read() == true && temp_val == 2 ) {// if button 2 is pressed and temp_val from pot2 is 2 (hot),
            leds_bus.write(0);                            // set cntl_val1 = 2 and temp_val1 = 3
            init_multiled();
            SegDis_init();
            cntl_val1 = 2;
            temp_val1 = 3;
            break;}
        }
        else if(cntl_val == 2 ){
        leds_bus.write(7);                           // When cntrl_val is 2, the mode is delicate.
        SegDis.write(hexDis[3]);
        if(button2.read() == true && temp_val == 0) {// if button 2 is pressed and temp_val from pot2 is 0 (cold), 
            leds_bus.write(0);                       // set cntl_val1 = 3 and temp_val1 = 1
            SegDis_init();
            init_multiled();
            cntl_val1 = 3;
            temp_val1 = 1;
            break;}
            if(button2.read() == true && temp_val == 1 ) {// if button 2 is pressed and temp_val from pot2 is 1 (warm),
            leds_bus.write(0);                            // set cntl_val1 = 3 and temp_val1 = 2
            init_multiled();
            SegDis_init();
            cntl_val1 = 3;
            temp_val1 = 2;
            break;}
            if(button2.read() == true && temp_val == 2 ) { // if button 2 is pressed and temp_val from pot2 is 2 (hot),
            leds_bus.write(0);                             // set cntl_val1 = 3 and temp_val1 = 3
            init_multiled();
            SegDis_init();
            cntl_val1 = 3;
            temp_val1 = 3;
            break;}
       }
       
        if(temp_val == 0 ){blue_LED.write(1); // temperature set to cold, and blue LED is on when pot2
        red_LED.write(0);
        green_LED.write(0);
        temp_val1 = 1;
       
        }
        else if(temp_val == 1 ){green_LED.write(1); // temperature set to warm, and green LED is on when pot2
        blue_LED.write(0);
        red_LED.write(0);
        temp_val1 = 2;
       
        }
        else if(temp_val == 2 ){red_LED.write(1); // temperature set to hot, and red LED is on when pot2
        blue_LED.write(0);
        green_LED.write(0);
        temp_val1 = 3;
        
        } 
       }
}
void FSR_check(){
    while(1){ 
           FSR_Val = FSR.read()*3.3; //FSR_Val is a float with values between 0 and 3.3.

        if (FSR_Val > 1.2 && FSR_Val <=2.5 ){ // When FSR_Val is between 1.2 and 2.5 the load size is medium.
         blue_LED.write(1.0);
           red_LED.write(0);
          green_LED.write(0);
          buzzer.pulsewidth_us(0);  
             if(button2.read() == true) {  // When button2 is pressed, FSR_val1 is set to 2.
             blue_LED.write(0.0);
             FSR_val1=2;
            break; }}

        else if (FSR_Val <= 1.2){   // When FSR_Val <= 1.2 the load size is small.
            green_LED.write(1);
            blue_LED.write(0.0);
            red_LED.write(0);
            buzzer.pulsewidth_us(0);  
           if(button2.read() == true) { // When button2 is pressed, FSR_val1 is set to 1.
            green_LED.write(0);
            FSR_val1=1;
            break; }}
        
         else if (FSR_Val > 2.5){  // When FSR_Val > 2.5 the load size is large.
             red_LED.write(1);
            printf("Warning!Remove load!\n"); // Warning message printed
            green_LED.write(0);
            blue_LED.write(0.0);
            play_note(NOTE_A4);    //buzzer sounds
            if(button2.read() == true) { /// When button2 is pressed, FSR_val1 is set to 3.
            buzzer.pulsewidth_us(0);  
            red_LED.write(0);
            FSR_val1=3;
            break; }}
    }
}


 void cycle_time(){
     if(FSR_val1 > 2){} // if load size is heavy, turn off washing machine

     else if (FSR_val1 == 2 || (cntl_val1 == 3 && temp_val1 == 1)){ // Condition for 45mins washing cycle
         while(1){
            printf("cycle time >> 45 mins ; cycle speed >> medium\n");                     
            SegDis.write(hexDis[4]);
            green_LED.write(1);                        
            ThisThread::sleep_for(1000ms);
            SegDis.write(hexDis[5]);
            green_LED.write(0);                        
            ThisThread::sleep_for(1000ms);
              
            if(button2.read()){
            SegDis_init(); // 7-seg display turned off, since it was on to display '45', before button2 was pressed.
            SegDis_loading(15); // loading animation and timer function
            SegDis_init();
            while(cntl_val2==0){ // global variable cntl_val2 is an integer set to 0.
                  play_note(NOTE_C4);
                  printf("Cycle complete! \n");
                  if (button1.read()){ //When button1 (on/off) is pressed cntl_val2 is set to 1. As a result, we exit the while loop.
                      cntl_val2=1;
                    }
                }
              break;
              }
         }}
         
    
         
    else if(temp_val1>1 && cntl_val1 < 3){ // Condition for 30mins washing cycle
        while(1){
              printf("cycle time >> 30 mins ; cycle speed >> high\n"); 
              SegDis.write(hexDis[3]);
              green_LED.write(1);                        
              ThisThread::sleep_for(1000ms);
              SegDis.write(hexDis[0]);
              green_LED.write(0);
              ThisThread::sleep_for(1000ms);
            
              if(button2.read()){
              SegDis_init();
              SegDis_loading(5);
              SegDis_init();
              while(cntl_val2==0){
                  play_note(NOTE_C4);
                  printf("Cycle complete! \n");
                  if (button1.read()){
                      cntl_val2=1;
                    }
                }
               
            break; }
    }
    }
     else if(cntl_val1==3 && temp_val1>1){ //Condition for 40mins washing cycle
     while(1){
             printf("cycle time >> 40 mins ; cycle speed >> medium\n");
              SegDis.write(hexDis[4]);
              green_LED.write(1);                        //write PWM duty cycle to LED
                ThisThread::sleep_for(1000ms);
              SegDis.write(hexDis[0]);
              green_LED.write(0);
                ThisThread::sleep_for(1000ms);
              //printf("cycle time >> 40 mins ; cycle speed >> medium\n");
              if(button2.read()){
            SegDis_init();
            SegDis_loading(12);
            SegDis_init();
            while(cntl_val2==0){
                  play_note(NOTE_C4);
                  printf("Cycle complete! \n");
                  if (button1.read()){
                      cntl_val2=1;
                    }
                }
            break;}    
    }
    }
    
     else if(cntl_val1<3 && temp_val1 == 1){ //Condition for 35mins washing cycle
     while(1){
             printf("cycle time >> 35 mins ; cycle speed >> high\n");
              SegDis.write(hexDis[3]);
              green_LED.write(1);                        
              ThisThread::sleep_for(1000ms);
              SegDis.write(hexDis[5]);
              green_LED.write(0);
              ThisThread::sleep_for(1000ms);
              
              if(button2.read()){
            SegDis_init();
            SegDis_loading(10);
            SegDis_init();
            while(cntl_val2==0){
                  play_note(NOTE_C4);
                  printf("Cycle complete! \n");
                  if (button1.read()){
                      cntl_val2=1;
                    }
                }
                
            break; }
    }
    }
 }

